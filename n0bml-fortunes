%
When I'm working on a problem, I never think about beauty... but when
I have finished, if the solution is not beautiful, I know it's wrong.
    -- R. Buckminster Fuller
%
If success or failure of this planet and of human beings depended on
how I am and what I do...  HOW WOULD I BE?  WHAT WOULD I DO?
    -- R. Buckminster Fuller
%
One accurate measurement is worth a thousand expert opinions.
    -- Grace Hopper
%
Science is like sex: sometimes something useful comes out, but that's
not why we're doing it.
    -- Richard Feynman
%
recursion, n:
        See recursion.
%
As far as the laws of mathematics refer to reality, they are not certain;
and as far as they are certain, they do not refer to reality.
    -- Albert Einstein.
%
There is a theory which states that if ever anyone discovers exactly what
the universe is for and why it is here, it will instantly disappear and be
replaced by something even more bizarrely inexplicable.
There is another theory which states that this has already happened...
%
For every complex problem there is an answer that is clear, simple, and
wrong.
    -- H. L. Mencken
%
A successful book is not made of what is in it, but what is left out of it.
    -- Mark Twain
%
Sic transit gloria maris.
%
Emacs outshines all other editing software in approximately the same
way that the noonday sun does the stars.  It is not just bigger and
brighter; it simply makes everything else vanish.
    -- Neal Stephenson, "In the Beginning was the Command Line"
%
Scientists investigate that which already is; engineers create that
which has never been.
    -- Albert Einstein
%
A good scientist is a person with original ideas.  A good engineer is a
person who makes a design that works with as few original ideas as
possible.  There are no prima donnas in engineering.
    -- Freeman Dyson
%
What I cannot create, I do not understand.
    -- Richard Feynman
%
I do not think there is any thrill that can go through the human heart
like that felt by the inventor as he sees some creation of the brain
unfolding to success.
    -- Nikola Tesla
%
NO NEED SHALL STAND UNADDRESSED.  There is a way to make things better.
%
NO CRAFT SHALL PASS UNAPPRECIATED.  It is always worthwhile to pause
and intake a thing of beauty.  Plus, it may spark a concordant idea of
one's own.
%
THE EFFORT ITSELF IS THE REWARD.  Yes, I did spend three days on a
device to save me ten minutes.  You are missing the point of the
process.
%
A FAILURE IS SIMPLY AN EXPERIMENT.  Most efforts will fail.  Rarely
should the same failure repeat itself.
%
MISCELLANEOUS PARTS ARE LIFE.  I'm keeping that because I will need it
someday.  Last time I threw something out, I needed it the very next
day.
%
PROBLEMS ARE DESIGNED TO BE SOLVED.  Spring into action.  Make it
happen.  Hannibal was right: I *love* it when a plan comes together.
%
PROJECTS ARE STACKABLE.  It's not that I'm starting something new
before finishing something old -- I'm *nesting* the new project
*inside* the old.
%
IF IT HAS SCREWS, THEY SHALL BE TURNED.  If it has bolts, they shall
be loosened.  If it has rivets, they may get along for a while without
being pried open, but that probably won't last.
%
IF IT IS BROKEN, IT IS FAIR GAME.  Maybe I can fix it.  Maybe I can
use some of its parts for something else.  Maybe I just want clearance
to be more rough than usual when opening up the case.
%
THE INSIDES OF THINGS ARE BEAUTIFUL.  Let's see what they look like.
%
What hath God wrought?
    -- Samuel Morse
%
If you want to find the secrets of the universe, think in terms of
energy, frequency and vibration.
    -- Nikola Tesla
%
We who cut mere stones must always be envisioning cathedrals.
    -- Quarry worker's creed
%
The greatest of all weakness is the fear of appearing weak.
    -- J.B. Boussuet, Politics from Holy Writ, 1709
%
Striving to be better, oft we mar what's well.
    -- King Lear 1.4
%
An investment in knowledge always pays the best interest.
    -- Benjamin Franklin
%
I believe that it is better to be looked over than it is to be overlooked.
    -- Mae West, Belle of the Nineties (1934)
%
Nothing is more dangerous than an idea if it's the only one you have.
    -- Emil-Auguste Chartier, Propos sur la religion, 1938
%
When I'm working on a problem, I never think about beauty... but when
I have finished, if the solution is not beautiful, I know it's wrong.
    -- R. Buckminster Fuller
%
If success or failure of this planet and of human beings depended on
how I am and what I do...  HOW WOULD I BE?  WHAT WOULD I DO?
    -- R. Buckminster Fuller
%
A rising tide lifts all boats.
%
One accurate measurement is worth a thousand expert opinions.
    -- Grace Hopper
%
This is not a novel to be tossed aside lightly.  It should be
thrown with great force.
    -- Dorothy Parker
%
This wasn't just plain terrible, this was fancy terrible.  This was
terrible with raisins in it.
    -- Dorothy Parker
%
The two most beautiful words in the English language are 'cheque enclosed.'
    -- Dorothy Parker
%
I have the hatred of apartheid in my bones; and most of all I detest the
segregation or separation of Language and Literature.  I do not care which
of them you think White.
    -- J.R.R. Tolkien
%
Poor planning on your part does not necessitate an emergency on mine.
    -- Bob Carter
%
It has to be everybody or nobody.
    -- R. Buckminster Fuller
%
One good thing about music, when it hits you, you feel no pain.
    -- Bob Marley
%
Without deviation from the norm, progress is not possible.
    -- Frank Zappa
%
Music, when combined with a pleasurable idea, is poetry; music, without the idea,
is simply music; the idea, without the music, is prose, from its very definitiveness.
    -- Edgar Allan Poe
%
What hath God wrought?
    -- Samuel Morse
%
If you want to find the secrets of the universe, think in terms of energy, frequency and vibration.
    -- Nikola Tesla
%
The Pragmatic Programmer Tip 1:
    Care about your craft.
%
The Pragmatic Programmer Tip 2:
   Think!  About your work.
%
The Pragmatic Programmer Tip 3:
   Provide options, don't make lame excuses.
%
The Pragmatic Programmer Tip 4:
   Don't live with broken windows.
%
The Pragmatic Programmer Tip 5:
   Be a catalyst for change.
%
The Pragmatic Programmer Tip 6:
   Remember the big picture.
%
The Pragmatic Programmer Tip 7:
   Make quality a requirements issue.
%
The Pragmatic Programmer Tip 8:
   Invest regularly in your knowledge portfolio.
%
The Pragmatic Programmer Tip 9:
    Critically analyze what you read and hear.
%
The Pragmatic Programmer Tip 10:
    It's both what you say and the way you say it.
%
The Pragmatic Programmer Tip 11:
    DRY - Don't Repeat Yourself
%
The Pragmatic Programmer Tip 12:
    Make it easy to reuse.
%
The Pragmatic Programmer Tip 13:
    Eliminate effects between unrelated things.
%
The Pragmatic Programmer Tip 14:
   There are no final decisions.
%
The Pragmatic Programmer Tip 15:
    Use tracer bullets to find the target.
%
The Pragmatic Programmer Tip 16:
    Prototype to learn.
%
The Pragmatic Programmer Tip 17:
    Program close to the problem domain.
%
The Pragmatic Programmer Tip 18:
    Estimate to avoid surprises.
%
The Pragmatic Programmer Tip 19:
    Iterate the schedule with the code.
%
The Pragmatic Programmer Tip 20:
    Keep knowledge in plain text.
%
The Pragmatic Programmer Tip 21:
    User the power of command shells.
%
The Pragmatic Programmer Tip 22:
    Use a single editor well.
%
The Pragmatic Programmer Tip 23:
    Always use source code control.
%
The Pragmatic Programmer Tip 24:
    Fix the problem, not the blame.
%
The Pragmatic Programmer Tip 25:
    Don't panic when debugging.
%
The Pragmatic Programmer Tip 26:
    "select" isn't broken.
%
The Pragmatic Programmer Tip 27:
    Don't assume it -- prove it.
%
The Pragmatic Programmer Tip 28:
    Learn a text manipulation language.
%
The Pragmatic Programmer Tip 29:
    Write code that writes code.
%
The Pragmatic Programmer Tip 30:
    You can't write perfect software.
%
The Pragmatic Programmer Tip 31:
    Design with contracts.
%
The Pragmatic Programmer Tip 32:
    Crash early.
%
The Pragmatic Programmer Tip 33:
    Use assertions to prevent the impossible.
%
The Pragmatic Programmer Tip 34:
    Use exceptions for exceptional problems.
%
The Pragmatic Programmer Tip 35:
    Finish what you start.
%
The Pragmatic Programmer Tip 36:
    Minimize coupling between modules.
%
The Pragmatic Programmer Tip 37:
    Configure, don't integrate.
%
The Pragmatic Programmer Tip 38:
    Put abstractions in code, details in metadata.
%
The Pragmatic Programmer Tip 39:
    Analyze workflow to improve concurrency.
%
The Pragmatic Programmer Tip 40:
    Design using services.
%
The Pragmatic Programmer Tip 41:
    Always design for concurrency.
%
The Pragmatic Programmer Tip 42:
    Separate views from models.
%
The Pragmatic Programmer Tip 43:
    Use blackboards to coordinate workflow.
%
The Pragmatic Programmer Tip 44:
    Don't program by coincidence.
%
The Pragmatic Programmer Tip 45:
    Estimate the order of your algorithms.
%
The Pragmatic Programmer Tip 46:
    Test your estimates.
%
The Pragmatic Programmer Tip 47:
    Refactor early, refactor often.
%
The Pragmatic Programmer Tip 48:
    Design to test.
%
The Pragmatic Programmer Tip 49:
    Test your software, or your users will.
%
The Pragmatic Programmer Tip 50:
    Don't use wizard code you don't understand.
%
The Pragmatic Programmer Tip 51:
    Don't gather requirements -- dig for them.
%
The Pragmatic Programmer Tip 52:
    Work with a user to think like a user.
%
The Pragmatic Programmer Tip 53:
    Abstractions live longer than details.
%
The Pragmatic Programmer Tip 54:
    Use a project glossary.
%
The Pragmatic Programmer Tip 55:
    Don't think outside the box -- find the box.
%
The Pragmatic Programmer Tip 56:
    Start when you're ready.
%
The Pragmatic Programmer Tip 57:
    Some things are better done than described.
%
The Pragmatic Programmer Tip 58:
    Don't be a slave to formal methods.
%
The Pragmatic Programmer Tip 59:
    Costly tools don't produce better designs.
%
The Pragmatic Programmer Tip 60:
    Organize teams around functionality.
%
The Pragmatic Programmer Tip 61:
    Don't use manual procedures.
%
The Pragmatic Programmer Tip 62:
    Test early.  Test often.  Test automatically.
%
The Pragmatic Programmer Tip 63:
    Coding ain't done 'til all the tests run.
%
The Pragmatic Programmer Tip 64:
    Use saboteurs to test your testing.
%
The Pragmatic Programmer Tip 65:
    Test state coverage, not code coverage.
%
The Pragmatic Programmer Tip 66:
    Find bugs once.
%
The Pragmatic Programmer Tip 67:
    English is just a programming language.
%
The Pragmatic Programmer Tip 68:
    Build documentation in, don't bolt it on.
%
The Pragmatic Programmer Tip 69:
    Gently exceed your users' expectations.
%
The Pragmatic Programmer Tip 70:
    Sign your work.
%
